Questions for Lesson 6

1. When you enable CRUD operations on a table in the database, you need to add four things
to your Rails application.  When you generate a scaffold, all four are created.What are they?

It is a model, a controller, views, and routes. 


2. When you specify a route in config/routes.rb, you need to include certain information.  What
must be included? In addition, you may specify an additional parameter to create a variable
that describes the route.  How do you do that? What variable is created?

You need to include:

1. The URL path that the route will match.
2. The controller that will handle the request.
3. The action (method) in the controller that will be called.
To create a variable that describes the route you need to add a colon (:) in the URL path.
For example, :id in the path 'posts/:id' creates a variable named id that will be available in the params hash in the controller action.
The variable id is used to access dynamic parts of the URL. For example, in the URL posts/5, params[:id] would be 5.

3. What does the Rails db:migrate command do?

It updates the database schema by applying changes defined in migration files. 

4. What file do you look at to see the current database schema?

To see the current database schema, you look at the db/schema.rb file. 

5. What command shows the routes?

rails routes

6. How can you start the Rails console? How can you do CRUD operations from the console?

rails console
or rails c

7. What statements are in erb files that make them different from html files?  What are the
two kinds of special statements, and how are they marked in the erb file? Where are they executed?

ERB files are different from regular HTML files because they can include Ruby code. 
There are 2 main types of special statements in ERB files:

Ruby Code (No Output):

Marked with <% %>.
Used for executing Ruby code that does not produce output in the HTML.
Example: <% @posts.each do |post| %>

Ruby Code with Output:

Marked with <%= %>.
Used for executing Ruby code that produces output, which will be included in the HTML.
Example: <%= @post.title %>
Both types of statements are executed on the server side before the HTML is sent to the client.

8. Consider this statement: @forum = Forum.new().  Why is Forum capitalized?  Why is @forum not
capitalized? Why is the @ used?

Forum is capitalized because it is a class name.
@forum is not capitalized because it is an instance variable.
The @ symbol is used before forum to denote that it is an instance variable. 

9. Consider these statements:

@forum = Forum.new(...)
@forum =Forum.create(...)
@forum.save(...)

What is the difference between Forum.new() and Forum.create()?  Why can't you do Forum.save(...)?


Forum.new(...) creates a new instance of the Forum class but does not save it to the database.
You need to call save separately to persist the record

Forum.create(...) creates a new instance of the Forum class and immediately saves it to the database.

Forum.save(...) is incorrect because save is an instance method, not a class method.

10. In the forums controller, you have a method called show:

  def show
  end

This is an action method.  It is an action method for only one reason: There is a route
that points to it.  But there's nothing in the method!  It will do the right things
because the default behavior does what is needed.  What does the default behavior
do?  How does it know which forum to show?  Whenever you have an action method, there
is a hash called params that is passed to that method.  And, in this case, the params
hash has a value, params[:id].  What is the value for this element of the hash? How
did it get there?

Default Behavior: Rails automatically finds the forum record based on the id provided and shows it. 
It uses a view template named show to display the forum details.
How It Knows Which Forum to Show: Rails uses the id value from the URL to find the right forum.
For example, if the URL is /forums/5, the id is 5.
Value of params[:id]: params[:id] holds the id value from the URL. In the example /forums/5, params[:id] is 5.
How It Got There: The id value is included in the URL, and Rails puts it into the params hash, which is passed to the show method. 
This allows Rails to find and display the correct forum.


